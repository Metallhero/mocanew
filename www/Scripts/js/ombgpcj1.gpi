
self.addEventListener('message', function (e) {
    var data = e.data;

    var maxSize = 5 * 1024 * 1024;
    var wdb = openDatabaseSync("MoCA", 2, "MoCA", maxSize);

    var MocaTest = { TestId: testId, ResultList: [] };
    //get Query
    var result = ExecuteSql("SELECT count(*) AS 'exist' FROM sqlite_master WHERE type='table' AND name='MocaTestClients'");
    if (data.rows.item(0).exist)
        return;

    var tables = [
                         "CREATE TABLE IF NOT EXISTS MocaComments(commentID INTEGER PRIMARY KEY,section TEXT,comment TEXT,caneva TEXT,testID INTEGER,testTypeID INTEGER)",
                         "CREATE TABLE IF NOT EXISTS MocaTest(testID INTEGER PRIMARY KEY,testDate NUMERIC,clientID INTEGER,userID INTEGER,commentResult TEXT,imageResult TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaTestClients(clientID INTEGER PRIMARY KEY,name TEXT,dateOfBirth NUMERIC,gender INTEGER,education TEXT,chartNumber TEXT,physican TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaTestGroup(ID INTEGER PRIMARY KEY,Title TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaTestResults(resultID INTEGER PRIMARY KEY,testID INTEGER,testTypeID INTEGER,score INTEGER,timeTest NUMERIC,TbNote TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaTestResultsValues(resultValueID INTEGER PRIMARY KEY,resultID INTEGER,valueNumber INTEGER,valueResult INTEGER,valueOptional TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaTestType(testTypeID INTEGER PRIMARY KEY,testName TEXT,maxScore INTEGER,maxTime INTEGER)",
                         "CREATE TABLE IF NOT EXISTS MocaTestType_MocaGroup(GroupId INTEGER,TestTypeId INTEGER)",
                         "CREATE TABLE IF NOT EXISTS MocaTestUsers(userID INTEGER PRIMARY KEY,name TEXT,occupation TEXT,username TEXT,password TEXT)",
                         "CREATE TABLE IF NOT EXISTS MocaImage (ID INTEGER PRIMARY KEY, Data TEXT, testID INTEGER, testTypeID INTEGER)",
                         "CREATE TABLE IF NOT EXISTS MocaResources (ID INTEGER PRIMARY KEY, Name TEXT, Value TEXT, Language TEXT, UpdateDate NUMERIC)"
    ];
    $.each(tables, function (k, v) {
        ExecuteSql(v);
    });

    var insertedData = {
        tableName: 'MocaTestType', data: [
            { 'testName': "abstraction_01", 'maxScore': 2, 'maxTime': 10 },
            { 'testName': "attention_01", 'maxScore': 1, 'maxTime': 10 },
            { 'testName': "attention_02", 'maxScore': 1, 'maxTime': 20 },
            { 'testName': "attention_03", 'maxScore': 3, 'maxTime': 5 },
            { 'testName': "delayedrecall_01", 'maxScore': 15, 'maxTime': 15 },
            { 'testName': "language_01", 'maxScore': 1, 'maxTime': 10 },
            { 'testName': "language_02", 'maxScore': 1, 'maxTime': 10 },
            { 'testName': "memory_01", 'maxScore': 5, 'maxTime': 20 },
            { 'testName': "naming_01", 'maxScore': 3, 'maxTime': 20 },
            { 'testName': "naming_02", 'maxScore': 5, 'maxTime': 15 },
            { 'testName': "naming_03", 'maxScore': 0, 'maxTime': 15 },
            { 'testName': "orientation_01", 'maxScore': 6, 'maxTime': 5 },
            { 'testName': "visuospatial_01", 'maxScore': 1, 'maxTime': 30 },
            { 'testName': "visuospatial_02", 'maxScore': 1, 'maxTime': 35 },
            { 'testName': "visuospatial_03", 'maxScore': 3, 'maxTime': 30 },
            { 'testName': "delayedrecall_02", 'maxScore': 0, 'maxTime': 3 },
            { 'testName': "delayedrecall_03", 'maxScore': 0, 'maxTime': 5 },
            { 'testName': "memory_02", 'maxScore': 0, 'maxTime': 20 },
            { 'testName': "attention_01_b", 'maxScore': 1, 'maxTime': 15 },
            { 'testName': "language_01_b", 'maxScore': 1, 'maxTime': 5 },
        ]
    };


    var result = ExecuteSql("Select ID From MocaTestGroup");

    for (var i = 0; i < result.rows.length; i++) {
        var groupId = result.rows.item(i).ID;
        var testResultVal = GetTestResultByGroup(testId, groupId);

        if (testResultVal && testResultVal.testResult) {
            for (var y = 0; y < testResultVal.testResult.length; y++) {
                var testResult = testResultVal.testResult[y];
                var testType = testResult.testTypeID;

                if (testResult.testResultValues) {
                    //sort by valueOptional
                    testResult.testResultValues.sort(SortByValueOptional);


                    var resultValues = [];
                    for (var k = 0; k < testResult.testResultValues.length; k++) {
                        var resultValue = testResult.testResultValues[k];
                        resultValues.push({
                            ValueOptional: resultValue.valueOptional,
                            ValueResult: resultValue.valueResult == 1 ? true : false
                        });
                    }
                    var resItem = {
                        ResultID: testResult.resultID,
                        TestType: testResult.testTypeID,
                        Score: testResult.score,
                        Time: testResult.timeTest,
                        ResultValues: resultValues
                    }
                    var testTypesImg = JSON.parse(data.testTypesWithImg);

                    if (testTypesImg.contains(resItem.TestType)) { //Images
                        var mocaImage = ExecuteSql("SELECT * FROM MocaImage Where testID=" + testId + " AND testTypeID=" + resItem.TestType);
                        if (mocaImage.rows.length > 0) {
                            resItem.MocaImage = { Data: mocaImage.rows.item(0).Data };
                        }
                    }
                    MocaTest.ResultList.push(resItem);

                }

            }
        }
    }
    MocaTest.Patient = {};
    //Patient info
    var patientQueryRes = ExecuteSql("Select * From MocaTestClients Inner Join MocaTest ON MocaTestClients.clientID = MocaTest.clientID Where MocaTest.testID=" + testId);
    var patient = patientQueryRes.rows.item(0);

    MocaTest.Patient.name = patient.name;
    MocaTest.Patient.chartNumber = patient.chartNumber;

    if (isValidDate(patient.dateOfBirth)) {
        MocaTest.Patient.dateOfBirth = patient.dateOfBirth;
    }
    MocaTest.Patient.education = patient.education;
    MocaTest.Patient.gender = patient.gender;

    //Administrator 
    MocaTest.Administrator = {};
    var adminQueryRes = ExecuteSql("Select * From MocaTestUsers  Inner Join MocaTest ON MocaTestUsers.userID = MocaTest.userID Where MocaTest.testID=" + testId);
    var admin = adminQueryRes.rows.item(0);
    MocaTest.Administrator.name = admin.name;

    //Comments
    var totalCommentQueryRes = ExecuteSql("Select * From MocaTest Where MocaTest.testID=" + testId);
    var totalComment = totalCommentQueryRes.rows.item(0);
    MocaTest.testDate = totalComment.testDate;
    var totalCommentText = totalComment.commentResult;
    var totalCommentImage = totalComment.imageResult;

    var commentsQueryRes = ExecuteSql("Select * From MocaComments Where testID = " + testId);
    MocaTest.CommentList = [];
    for (var i = 0; i < commentsQueryRes.rows.length; i++) {
        var comment = commentsQueryRes.rows.item(i);
        if (comment.comment || comment.caneva) {
            MocaTest.CommentList.push({ CommentText: comment.comment, CommentImage: comment.caneva, TestType: comment.testTypeID });
        }
    }
    if (totalCommentText || totalCommentImage) {
        MocaTest.CommentList.push({ CommentText: totalCommentText, CommentImage: totalCommentImage, TestType: 0 });
    }

    //Final serialize
    var finalTestResult = JSON.stringify(MocaTest);

    postMessage({ queryResult: finalTestResult });

    function ExecuteSql(sql) {
        var rs;
        wdb.transaction(function (tx) {
            rs = tx.executeSql(sql, []);
        });
        return rs;
    }


    function GetTestResultByGroup(testId, groupId) {
        var results = ExecuteSql(SelectTestResultValuesByGroupIdAndTestIdQuery(testId, groupId));
        var testResults = [];
        if (results.rows.length > 0) {
            var groupName = results.rows.item(0).GroupName;
            var groupId = results.rows.item(0).GroupId;
            for (var i = 0; i < results.rows.length; i++) {
                var testResult = results.rows.item(i);

                testResults.push(testResult);
            }

            var result = groupBy(testResults, function (item) {
                return [item.resultID];
            });
            var tempResult = [];
            for (var i = 0; i < result.length; i++) {
                var testRes = result[i];

                for (var j = 0; j < testRes.length; j++) {
                    if (j == 0) {
                        tempResult.push({ resultID: testRes[j].resultID, testTypeID: testRes[j].testTypeID, score: testRes[j].score, timeTest: testRes[j].timeTest, testResultValues: [] });
                    }
                    tempResult[tempResult.length - 1].testResultValues.push({ valueOptional: testRes[j].valueOptional, valueResult: testRes[j].valueResult });
                }
            }

            var res = { "groupName": groupName, "groupId": groupId, "testResult": tempResult };

            return res;
        }


    }

}, false);
 
var GetInsertQueries = function (insertedData) {
    log('GetInsertQueries');
    log(insertedData);
    var insertedQueries = [];
    $.each(insertedData.data, function (k, v) {
        var values = [];

        $.each(v, function (key, value) {
            values.push("'" + value + "'");
        });

        var keys = $.map(v, function (item, i) {
            return i;
        });

        var insertedQuery = "INSERT into " + insertedData.tableName + "(" + keys.join(',') + ")" + " values(" + values.join(',') + ")";
        insertedQueries.push(insertedQuery);

    });
    return insertedQueries;
};